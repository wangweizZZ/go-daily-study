// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransferServiceClient is the client API for TransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransferServiceClient interface {
	Open(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*FileInfoResult, error)
	Write(ctx context.Context, opts ...grpc.CallOption) (TransferService_WriteClient, error)
}

type transferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferServiceClient(cc grpc.ClientConnInterface) TransferServiceClient {
	return &transferServiceClient{cc}
}

func (c *transferServiceClient) Open(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*FileInfoResult, error) {
	out := new(FileInfoResult)
	err := c.cc.Invoke(ctx, "/TransferService/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) Write(ctx context.Context, opts ...grpc.CallOption) (TransferService_WriteClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransferService_ServiceDesc.Streams[0], "/TransferService/Write", opts...)
	if err != nil {
		return nil, err
	}
	x := &transferServiceWriteClient{stream}
	return x, nil
}

type TransferService_WriteClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*ChunkResult, error)
	grpc.ClientStream
}

type transferServiceWriteClient struct {
	grpc.ClientStream
}

func (x *transferServiceWriteClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transferServiceWriteClient) CloseAndRecv() (*ChunkResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ChunkResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransferServiceServer is the server API for TransferService service.
// All implementations must embed UnimplementedTransferServiceServer
// for forward compatibility
type TransferServiceServer interface {
	Open(context.Context, *FileInfo) (*FileInfoResult, error)
	Write(TransferService_WriteServer) error
	mustEmbedUnimplementedTransferServiceServer()
}

// UnimplementedTransferServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransferServiceServer struct {
}

func (UnimplementedTransferServiceServer) Open(context.Context, *FileInfo) (*FileInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedTransferServiceServer) Write(TransferService_WriteServer) error {
	return status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedTransferServiceServer) mustEmbedUnimplementedTransferServiceServer() {}

// UnsafeTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransferServiceServer will
// result in compilation errors.
type UnsafeTransferServiceServer interface {
	mustEmbedUnimplementedTransferServiceServer()
}

func RegisterTransferServiceServer(s grpc.ServiceRegistrar, srv TransferServiceServer) {
	s.RegisterService(&TransferService_ServiceDesc, srv)
}

func _TransferService_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TransferService/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).Open(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransferServiceServer).Write(&transferServiceWriteServer{stream})
}

type TransferService_WriteServer interface {
	SendAndClose(*ChunkResult) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type transferServiceWriteServer struct {
	grpc.ServerStream
}

func (x *transferServiceWriteServer) SendAndClose(m *ChunkResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transferServiceWriteServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransferService_ServiceDesc is the grpc.ServiceDesc for TransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TransferService",
	HandlerType: (*TransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Open",
			Handler:    _TransferService_Open_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Write",
			Handler:       _TransferService_Write_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "internal/proto/service.proto",
}
